%{
	
	#include<stdio.h>
	#include<stdlib.h>
	#include "symbol_6.c" 
	//int yylex(void);
	void yyerror(char *);
	int evaltree(struct tnode *nd);
	int glob_type ;
	
%}


%token AND
%token OR
%token NOT
%token TRUE
%token FALSE
%token BOOLEAN
%token INTEGER
%token DECL
%token ENDDECL
%token READ
%token WRITE
%token ID
%token DIGIT
%token IF
%token THEN
%token ENDIF
%token WHILE
%token DO
%token ENDWHILE
%token EQU
%token LT
%token GT
%token LE
%token GE
%token NE
 
%left OR AND
%right EQU NE
%left LT GT GE LE  
%left '+' '-'
%left '*' '/'
%right NOT


%%

Start : global Slist '\n'  {evaltree($2);exit(1);}

	;

Slist	:  Slist stmt {$$=(struct tnode *)malloc(sizeof(struct tnode));
			$$->nodetype=6;
			$$->ptr1=$1;
			$$->ptr3=$2;}	  	 
					 
	  |stmt		{$$=$1;}
	  ;

stmt	:	ID '='	expr ';'	{ 
						$1->gentry = glookup($1->name);
						if($1->gentry == NULL )
						{
							yyerror("syntax error");

						}
						if(gettype($1) != gettype($3))
							yyerror("syntax error");			
						$2->ptr1=$1;$2->ptr3=$3;$$=$2;
						
					}


		| ID '[' DIGIT ']' '=' expr ';'	{ 
						$1->gentry = glookup($1->name);
						if($1->gentry == NULL )
						{
							yyerror("syntax error");

						}
						if(gettype($1) != gettype($3))
							yyerror("syntax error");			
						$2->ptr1=$1;$2->ptr3=$3;$$=$2;
						
					}

		| READ '(' ID ')' ';'   { 	$3->gentry = glookup($3->name);
						if($3->gentry == NULL )
						{
							yyerror("syntax error");

						}
						if(gettype($3) != 0)
							yyerror("syntax error");			
						
						$1->ptr1=$3;$1->ptr3=NULL;$$=$1;
					}

		| READ '(' ID '[' expr ']' ')' ';'   	{ 	$3->gentry = glookup($3->name);
								if($3->gentry == NULL )
								{
								yyerror("syntax error");

							}
							if(gettype($3) != 0)
								yyerror("syntax error");			
						
							$1->ptr1=$3;$1->ptr3=NULL;$$=$1;
					}

		| WRITE '(' expr ')' ';'  { 	
						if(gettype($3) != 0)
							yyerror("syntax error");			
						
						$1->ptr1=$3;$1->ptr3=NULL;$$=$1;
					}

		| IF '(' expr ')' THEN Slist ENDIF ';'	{$1->ptr1=$3;$1->ptr3=$6;$$=$1;}

		| WHILE '(' expr ')' DO Slist ENDWHILE ';'	{$1->ptr1=$3;$1->ptr3=$6;$$=$1;}

		| 

		;

global	:	DECL slist_2 ENDDECL 

		;

slist_2	:	slist_2 stmt_2

		| stmt_2

		;

stmt_2	:	dtype decl ';' 

		;

dtype	:	INTEGER		{glob_type = 0;}

		| BOOLEAN	{glob_type = 2;}

		;

decl	: 	ID '[' DIGIT ']'	{ 	
						$1->type = glob_type + 1 ;
						ginstall($1->name,$1->type,$3->value);
					}

		| ID			{ 	
						$1->type = glob_type + 0 ;
						ginstall($1->name,$1->type,1);
					}

		| decl ',' decl

		;


expr	:	DIGIT 		{$$=$1;}

		| '(' expr ')' 		{$$=$2;}

		| expr '+' expr 	{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}
 
		| expr '-' expr 	{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr '*' expr 	{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr '/' expr 	{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr GT expr 		{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr LT expr		{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr LE expr		{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr GE expr		{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr NE expr		{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr EQU expr 	{
						if(gettype($1) != 0  || gettype($3) != 0)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}
		
		| ID			{
						if(glookup($1->name)==NULL)
							yyerror("identifier  not declared");
						
						$$ = $1;
					}

		| ID '[' expr ']'	{
						if(glookup($1->name)==NULL)
							yyerror("identifier  not declared");

						if(gettype($3->name)!=0)
							yyerror("syntax error");

						$1->ptr1 = $3;
						$1->ptr3 = NULL;
						$$ = $1;
					}

		| TRUE			{$$=$1;}

		| FALSE			{$$=$1;}

		| expr AND expr 	{
						if(gettype($1) != 2  || gettype($3) != 2)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| expr OR expr 		{
						if(gettype($1) != 2  || gettype($3) != 2)
							yyerror("syntax error");
						$2->ptr1=$1;
					 	$2->ptr3=$3;
					 	$$=$2;
					}

		| NOT expr 		{
						if(gettype($2) != 2)
							yyerror("syntax error");
						$1->ptr1=$2;
					 	$1->ptr3=NULL;
					 	$$=$1;
					}

		;

%%

void yyerror(char *s) {
	fprintf(stderr, "%s\n", s);
}

int evaltree(struct tnode *nd){

	if(nd->nodetype==0){
		return nd->value;
	}
	if((nd->type==0 || nd->type == 2) && nd->nodetype ==2 )
		return (nd->gentry->binding[0]) ;

	if((nd->type==1 || nd->type == 3) && nd->nodetype ==2 )
		return (nd->gentry->binding[evaltree(nd->ptr1)]) ;

	if(nd->nodetype==1){
		if(strcmp(nd->name,"=") == 0)

		   {
			if(nd->type == 0 || nd->type == 2)
			{
		     		nd->ptr1->gentry->binding[0]=evaltree(nd->ptr3);
		     		return 1;
			}

			if(nd->type == 1 || nd->type == 3)
			{
		     		nd->ptr1->gentry->binding[evaltree(nd->ptr1->ptr1)]=evaltree(nd->ptr3);
		     		return 1;
			}

		   }	
	
		if(strcmp(nd->name,"+") == 0)
			return (evaltree(nd->ptr1)+evaltree(nd->ptr3));
		else if(strcmp(nd->name,"-") == 0)
			return (evaltree(nd->ptr1) - evaltree(nd->ptr3));
		else if(strcmp(nd->name,"*") == 0)
			return (evaltree(nd->ptr1) * evaltree(nd->ptr3));
		else if(strcmp(nd->name,"/") == 0)
			return (evaltree(nd->ptr1) / evaltree(nd->ptr3));
	}
	if(nd->nodetype==3)
	{ int c;
		scanf("%d",&c);
			if(nd->ptr1->type == 0 )
			{
		     		nd->ptr1->gentry->binding[0]=evaltree(nd->ptr3);
		     		return 1;
			}

			if(nd->ptr1->type == 1)
			{
		     		nd->ptr1->gentry->binding[evaltree(nd->ptr1->ptr1)]=evaltree(nd->ptr3);
		     		return 1;
			}
		 
	}
	if(nd->nodetype==4)
	{
			if(nd->ptr1->type == 0 )
			{
		     		printf("%d\n",nd->ptr1->gentry->binding[0]);
		     		return 1;
			}

			if(nd->ptr1->type == 1)
			{
		     		printf("%d\n",nd->ptr1->gentry->binding[evaltree(nd->ptr1->ptr1)]);
		     		return 1;
			}
		
	}
	if(nd->nodetype==6)
	{ evaltree(nd->ptr1);
	  evaltree(nd->ptr3);
	 return 1;
	}

	if(nd->type == 0 && nd->nodetype==5){
				
		if(strcmp (nd->name,"<") == 0)
			return (evaltree(nd->ptr1) < evaltree(nd->ptr3));
		if(strcmp (nd->name,">") == 0)
			return (evaltree(nd->ptr1) > evaltree(nd->ptr3));
		if(strcmp (nd->name,"<=") == 0)
			return (evaltree(nd->ptr1) > evaltree(nd->ptr3));
		if(strcmp (nd->name,">=") == 0)
			return (evaltree(nd->ptr1) > evaltree(nd->ptr3));
		if(strcmp (nd->name,"!=") == 0)
			return (evaltree(nd->ptr1) > evaltree(nd->ptr3));
		
	}

	if(nd->type == 2 && nd->nodetype==5){
				
		if(strcmp (nd->name,"AND") == 0)
			return (evaltree(nd->ptr1) && evaltree(nd->ptr3));
		if(strcmp (nd->name,"OR") == 0)
			return (evaltree(nd->ptr1) || evaltree(nd->ptr3));
		if(strcmp (nd->name,"NOT") == 0)
			return (!evaltree(nd->ptr1));

		
	}

	if(nd->nodetype==7)
	{
		if(evaltree(nd->ptr1))
			evaltree(nd->ptr3) ;
		return 1;

	}

	if(nd->nodetype==8)
	{
		while(evaltree(nd->ptr1))
			evaltree(nd->ptr3) ;
		return 1;

	}

	if(nd->nodetype==9)
	{

		
		return (evaltree(nd->ptr1) == evaltree(nd->ptr3));
	}

}

int main(void) {
	yyparse();
	return 0;
}

